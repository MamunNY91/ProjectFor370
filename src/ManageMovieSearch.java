import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;


public class ManageMovieSearch extends javax.swing.JFrame {
	public static final String User_Agent = "Mozilla/5.0 (Windows; U; Windows "
    		+ "NT 5.1; en-US; rv:1.9.2) Gecko/20100115 Firefox/3.6";
	static String x = new File(System.getProperty("user.dir")).toString();
	public static String webpage = "https://www.rottentomatoes.com/search/?search=";
	 // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton searchButton;
    private javax.swing.JButton getMovieInfoButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    /**
     * Creates new form MANAGE_PRODUCTS_FORM
     */
    public ManageMovieSearch() throws IOException {
        initComponents();
        table.setShowGrid(true);
        table.setGridColor(Color.YELLOW);
        table.setSelectionBackground(Color.gray);
        JTableHeader th = table.getTableHeader();
        th.setFont(new Font("Tahoma", Font.PLAIN, 16));
    }

    
    
    // populate the jtable
    public void populateJtable(String urlAlongWithQuery) throws IOException{
        
    	ArrayList<Item> list = getInitialSearchResult(urlAlongWithQuery);
        
        String[] colNames = {"Name", "Year", "Image","meterClass","meterScore","url"};
        Object[][] rows = new Object[list.size()][6];
        
        for(int i = 0; i < list.size(); i++){
            rows[i][0] = list.get(i).getName();
            rows[i][1] = list.get(i).getYear();
            downloadImage(list.get(i).getImgUrl(),list.get(i).getName());
            ImageIcon pic = new ImageIcon(
                    (x+"/"+list.get(i).getName()+".jpg"));
                     
            rows[i][2] = pic;
            if(list.get(i).getMeterClass().equalsIgnoreCase("rotten"))
            {
            	ImageIcon icon = new ImageIcon(x+"/"+"roten.png");
            	rows[i][3] = icon;
            }
            else if (list.get(i).getMeterClass().equalsIgnoreCase("certified_fresh"))
            {
            	ImageIcon icon = new ImageIcon(x+"/"+"cf.png");
          
            	rows[i][3] = icon;
            }
            else if(list.get(i).getMeterClass().equalsIgnoreCase("fresh"))
            {
            	ImageIcon icon = new ImageIcon(x+"/"+"fresh.png");
            	rows[i][3] = icon;
            }
            else{
            	rows[i][3] = new JLabel("N/A");
            }
            rows[i][4] = list.get(i).getMeterScore();
            rows[i][5] = list.get(i).getUrl();
            

        }
        
        MyTableModel mmd = new MyTableModel(rows, colNames);
        table.setModel(mmd);
        table.setRowHeight(80);
        table.getColumnModel().getColumn(4).setPreferredWidth(120);
        table.getColumnModel().getColumn(0).setPreferredWidth(300);
        table.getColumnModel().getColumn(3).setPreferredWidth(100);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    	   Toolkit kit = Toolkit.getDefaultToolkit();
	       Dimension screen = (Dimension) kit.getScreenSize();
	       int width = screen.width;
	       int height = screen.height;
	       setSize(width/2,height/2);

        jPanel1 = new javax.swing.JPanel();
        searchTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        getMovieInfoButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

       

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	try {
					searchButtonActionPerformed(evt);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });
        getMovieInfoButton.addActionListener(new java.awt.event.ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				try {
					getMovieInfoButtonAction();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
			}
        	
        });

        jScrollPane1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        table.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {

                }
            ));
            
            jScrollPane1.setViewportView(table);
        getMovieInfoButton.setText("Get Movie Info");
        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(getMovieInfoButton)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(searchTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchButton)
                        .addGap(35, 35, 35))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(getMovieInfoButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        
    }// </editor-fold>                        

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) throws IOException 
    {                                         
        String textContentOfSearchField = searchTextField.getText();
        if(textContentOfSearchField.isEmpty())
        {
        	JOptionPane.showMessageDialog(null,
        		    "Please Enter movie name in search box");
        }
        else
        {
        	if(textContentOfSearchField.contains(" "))
        	{
        		textContentOfSearchField = textContentOfSearchField.replace(" ", "%20");
        		populateJtable(webpage+textContentOfSearchField);
        		
        	}
        	else
        	{
        		populateJtable(webpage+textContentOfSearchField);
        	}
        }
    }                                        

	public static void downloadImage(String imgUrl,String imageName) throws IOException
    {
    	
 		 URL url = new URL(imgUrl);
 	 	 URLConnection uc = url.openConnection();
 	 	 saveImage(x+"/"+imageName+".jpg",url);
 	  
 	   
    }
    public static void saveImage(String locationUWantToSave,URL url) 
    {
    	File outputImageFile = new File(locationUWantToSave);
    	try{
    	BufferedImage image = ImageIO.read(url);
    	ImageIO.write(image, "jpg", outputImageFile); 
    	}
    	catch(Exception e)
    	{
    		System.out.println("Fetching image was not successful");
    	}
    }

    public static ArrayList<Item> getInitialSearchResult(String urlAlongWithQuery) throws IOException
    {
    	String htmlContentINeed = getHtmlContentBasedOnQuery(
				"<div id=\"search-results-root\"></div>[\\s]*?<script\\b[^>]*>([\\s\\S]*?)</script>"
				,urlAlongWithQuery);
    	ArrayList<Item> resultList = new ArrayList<>();
    	if(!htmlContentINeed.isEmpty())
    	{
    		Pattern moviePattern = Pattern.compile("(\"name\"|\"title\"):\"([\\w\\s:-]*)\","
    				+ "(\"startYear\":\\d+|\"year\":\\d+),\"url\":\"/(m|tv)([/\\w+-_]*)\""
    				+ ",\"image\":\"(\\b[^\"]*)\",\"meterClass\":\"([\\w_/]*)\",(\"meterScore\":\\d+)?");
    	    Matcher m = moviePattern.matcher(htmlContentINeed);
    	    while(m.find())
    	    {
    	    	String stringINeedFromM = m.group();
    	    	if(stringINeedFromM.endsWith(".gif"))
    	    	{
    	    		//exclude movies that has no rating
    	    		continue;
    	    	}
    	    	else
    	    	{   
    	    		String str[] = m.group().split("\"");
    	    		if(str.length == 21)
    	    		{
    	    			String name = str[3].trim();
    	        		String year = str[6].split(":")[1].split(",")[0];
    	        		String url = str[9];
    	        		url = "https://www.rottentomatoes.com"+url;
    	        		String imgUrl = str[13];
    	        		String meterClass = str[17];
    	        		String meterScore = str[20].split(":")[1]+"%";
    	        		 Item item = new Item(name,year,url,imgUrl,meterClass,meterScore);
    	        		 resultList.add(item);
    	    		}
    	    		else
    	    		{
    	    			String name = str[3].trim();
    	        		String year = str[6].split(":")[1].split(",")[0];
    	        		String url = str[9];
    	        		url = "https://www.rottentomatoes.com"+url;
    	        		String imgUrl = str[13];
    	        		String meterClass = str[17];
    	        		String meterScore = "N/A";
    	        		Item item = new Item(name,year,url,imgUrl,meterClass,meterScore);
   	        		    resultList.add(item);
    	    		}
    	    		
    	    		
    	    	}
    	    	
    	    }
    	  
        }
    	if(resultList.isEmpty())
    	{
    		JOptionPane.showMessageDialog(null,
        		    "No Movie is found");
    	}
    	return resultList;
    }
    private static String getHtmlContentBasedOnQuery(String pattern, String url) throws IOException {
		String result = "";
    	String htmlPage = ""; //store html contents in this string to get HtmlContentINeed
    	BufferedReader reader = read(url);
    	String line = reader.readLine();
    	while(line != null)
    	{
    		htmlPage += line +"\n";
    		line = reader.readLine();
    	}
    	Pattern p = Pattern.compile(pattern
    			,Pattern.MULTILINE);
    	Matcher m = p.matcher(htmlPage);
    	while(m.find())
    	{
    		result = m.group();
    	}
    	return result;
	}
    public static InputStream getURLInputStream(String sURl) throws MalformedURLException, IOException
    {
    	URLConnection uc = (new URL(sURl)).openConnection();
    	uc.setRequestProperty("User-Agent", User_Agent);
		return uc.getInputStream();	
    }
    public static BufferedReader  read(String url) throws MalformedURLException, IOException
    {
    	InputStream content = getURLInputStream(url);
    	return new BufferedReader(new InputStreamReader(content));
    }
    public static String getHtmlContent(String webpage) throws IOException
    {
    	
    	String result = "";
    	String result2 = "";
    	String htmlPage = ""; //store html contents in this string to get HtmlContentINeed
    	BufferedReader reader = read(webpage);
    	String line = reader.readLine();
    	while(line != null)
    	{
    		htmlPage += line +"\n";
    		line = reader.readLine();
    	}
    	Pattern patternForScore = Pattern.compile("<div class=\"mop-ratings-wrap score_panel[\\w\\s-_]*\">([\\s\\S]*?)</section>"
    			,Pattern.MULTILINE);
    	Matcher m = patternForScore.matcher(htmlPage);
    	while(m.find())
    	{
    		result = m.group();
    		
    	}
    	Pattern patternOfHTMLForImage = 
    			Pattern.compile("<div +id=\"topSection\">([\\s\\S]*?)/>",Pattern.MULTILINE);
    	Matcher m2 = patternOfHTMLForImage.matcher(htmlPage);
    	while(m2.find())
    	{
    		result2 = m2.group();
    	}
    	
    	return result+"\n\n"+result2;
    }
    
   private void getMovieInfoButtonAction() throws IOException
   {
	   int count= table.getModel().getRowCount(); 
	   //check if table is empty
	   if(count == 0)
	   {
		   JOptionPane.showMessageDialog(null, "Table is Empty, you need to search movies first.");
	   }
	   else
	   {
		   //If table is not empty check whether user selected a row
	      if(table.getSelectionModel().isSelectionEmpty())
	       {
		     JOptionPane.showMessageDialog(null, "Please select a movie from the table");
	       }
	      else
	      {
	    	  //get selected row
	    	  Integer rowIndex = table.getSelectedRow();
	    	  //get url from item
	    	  String url = table.getValueAt(rowIndex, 5).toString();
	    	  MovieDetailsFrame md = new MovieDetailsFrame(url);
	    	  md.setVisible(true);
	    	  md.setLocationRelativeTo(null);
	    	  md.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
	    	  
	      }
	   }
   }
}
